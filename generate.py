# File: generate_epg.py

import xml.etree.ElementTree as ET
from xml.dom import minidom
from datetime import datetime
import pytz

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ---
# ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ "‡∏ô‡∏±‡∏Å‡∏™‡∏∑‡∏ö" ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå scrapers.py
from scrapers import scrape_one31_schedule, scrape_mono29_schedule, scrape_thairath_schedule, scrape_ch3_schedule, scrape_amarin_schedule, scrape_ch7_schedule, scrape_Workpoint_schedule, scrape_PPTV_schedule, scrape_True24_schedule, scrape_GMM25_schedule, scrape_TOPNew_schedule, scrape_TPBS_schedule, scrape_8SD_schedule, scrape_Nation_schedule, scrape_Boomerang_schedule, scrape_MCOT_schedule, scrape_TNN_schedule,scrape_5HD_schedule,scrape_JKN18_schedule


def create_epg():
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå guide.xml
    """
    # 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πà‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö "‡∏ô‡∏±‡∏Å‡∏™‡∏∑‡∏ö" (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô) ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏õ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    #    *** ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï ‡∏Å‡πá‡πÅ‡∏Ñ‡πà‡∏°‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô list ‡∏ô‡∏µ‡πâ ***
    channels_to_scrape = [
        {"id": "ONE", "name": "ONE 31 HD", "logo": "...", "scraper": scrape_one31_schedule},
        {"id": "Thairath", "name": "Thairath TV", "logo": "...", "scraper": scrape_thairath_schedule},
        {"id": "MONO29", "name": "MONO29 HD", "logo": "...", "scraper": scrape_mono29_schedule},
        {"id": "3HD", "name": "3 HD", "logo": "...", "scraper": scrape_ch3_schedule},
        #{"id": "Amarin", "name": "Amarin TV HD", "logo": "...", "scraper": scrape_amarin_schedule},
        {"id": "7HD", "name": "7 HD", "logo": "...", "scraper": scrape_ch7_schedule},
        #{"id": "Workpoint", "name": "Workpoint HD", "logo": "...", "scraper": scrape_Workpoint_schedule},
       # {"id": "PPTV", "name": "PPTV HD", "logo": "...", "scraper": scrape_PPTV_schedule},
       # {"id": "True24", "name": "True24 SD", "logo": "...", "scraper": scrape_True24_schedule},
       # {"id": "GMM25", "name": "GMM 25", "logo": "...", "scraper": scrape_GMM25_schedule},
       # {"id": "TOPNew", "name": "TOP New SD", "logo": "...", "scraper": scrape_TOPNew_schedule},
       # {"id": "TPBS", "name": "TPBS HD", "logo": "...", "scraper": scrape_TPBS_schedule},
       # {"id": "8SD", "name": "‡∏ä‡πà‡∏≠‡∏á 8 SD", "logo": "...", "scraper": scrape_8SD_schedule},
       # {"id": "Nation", "name": "Nation HD", "logo": "...", "scraper": scrape_Nation_schedule},
       # {"id": "Boomerang", "name": "Boomerang", "logo": "...", "scraper": scrape_Boomerang_schedule},
       # {"id": "MCOT", "name": "MCOT HD", "logo": "...", "scraper": scrape_MCOT_schedule},
       # {"id": "TNN", "name": "TNN SD", "logo": "...", "scraper": scrape_TNN_schedule},
       # {"id": "5HD", "name": "5HD", "logo": "...", "scraper": scrape_5HD_schedule},
       # {"id": "JKN18", "name": "JKN18", "logo": "...", "scraper": scrape_JKN18_schedule},
    ]

    program_data = {}

    # 2. ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏™‡∏∑‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡πÑ‡∏õ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    for channel in channels_to_scrape:
        channel_id = channel["id"]
        scraper_function = channel["scraper"]
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏±‡πâ‡∏ô‡πÜ
        scraped_programs = scraper_function()
        
        if not scraped_programs:
            continue # ‡∏ñ‡πâ‡∏≤‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏Å‡πá‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏ä‡πà‡∏≠‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
        for i in range(len(scraped_programs)):
            if i < len(scraped_programs) - 1:
                scraped_programs[i]['end_time'] = scraped_programs[i+1]['start_time']
            else:
                scraped_programs[i]['end_time'] = "24:00"
        
        program_data[channel_id] = scraped_programs

    # 3. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå XML ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡πÑ‡∏î‡πâ
    print("\nüìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå guide.xml...")
    tz = pytz.timezone("Asia/Bangkok")
    today = datetime.now(tz)
    
    tv_root = ET.Element("tv")

    for chan in channels_to_scrape:
        channel_elem = ET.SubElement(tv_root, "channel", {"id": chan["id"]})
        ET.SubElement(channel_elem, "display-name", {"lang": "th"}).text = chan["name"]
        ET.SubElement(channel_elem, "icon", {"src": chan["logo"]})

    for channel_id, programs in program_data.items():
        for prog in programs:
            try:
                start_h, start_m = map(int, prog['start_time'].split(':'))
                end_h, end_m = (23, 59) if prog['end_time'] == "24:00" else map(int, prog['end_time'].split(':'))

                start_time_obj = today.replace(hour=start_h, minute=start_m, second=0, microsecond=0)
                end_time_obj = today.replace(hour=end_h, minute=end_m, second=0, microsecond=0)
                
                time_format = "%Y%m%d%H%M%S %z"

                programme_elem = ET.SubElement(tv_root, "programme", {
                    "start": start_time_obj.strftime(time_format),
                    "stop": end_time_obj.strftime(time_format),
                    "channel": channel_id
                })
                
                ET.SubElement(programme_elem, "title", {"lang": "th"}).text = prog["title"]
                ET.SubElement(programme_elem, "desc", {"lang": "th"}).text = prog.get("description", "-")
            except (ValueError, AttributeError):
                continue

    xml_str = ET.tostring(tv_root, 'utf-8')
    pretty_xml_str = minidom.parseString(xml_str).toprettyxml(indent="  ", encoding="utf-8")

    with open("guide.xml", "wb") as f:
        f.write(pretty_xml_str)
        
    print("‚úÖ‚úÖ‚úÖ ‡πÑ‡∏ü‡∏•‡πå guide.xml ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! (‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á ONE31 ‡πÅ‡∏•‡∏∞ MONO29)")


# --- ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ---
if __name__ == "__main__":
    create_epg()